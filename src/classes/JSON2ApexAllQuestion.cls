//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2ApexAllQuestion {
    public static void consumeObject(JSONParser parser) {
        Integer depth = 0;
        do {
            JSONToken curr = parser.getCurrentToken();
            if (curr == JSONToken.START_OBJECT || 
                curr == JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == JSONToken.END_OBJECT ||
                curr == JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    public class Topics {
        public Integer id {get;set;} 
        public Long creationDate {get;set;} 
        public String creationDateFormatted {get;set;} 
        public String name {get;set;} 
        public Author author {get;set;} 
        public Integer usedCount {get;set;} 

        public Topics(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'creationDate') {
                            creationDate = parser.getLongValue();
                        } else if (text == 'creationDateFormatted') {
                            creationDateFormatted = parser.getText();
                        } else if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'author') {
                            author = new Author(parser);
                        } else if (text == 'usedCount') {
                            usedCount = parser.getIntegerValue();
                        } else {
                           // System.debug(LoggingLevel.WARN, 'Topics consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class List_Z {
        public Integer id {get;set;} 
        public String type_Z {get;set;} // in json: type
        public Long creationDate {get;set;} 
        public String creationDateFormatted {get;set;} 
        public String title {get;set;} 
        public String body {get;set;} 
        public String bodyAsHTML {get;set;} 
        public Author author {get;set;} 
        public Integer lastEditedAction {get;set;} 
        public Integer activeRevisionId {get;set;} 
        public List<Integer> revisionIds {get;set;} 
        public Integer lastActiveUserId {get;set;} 
        public Long lastActiveDate {get;set;} 
        public List<Attachments> attachments {get;set;} 
        public List<Integer> childrenIds {get;set;} 
        public List<Attachments> commentIds {get;set;} 
        public Boolean marked {get;set;} 
        public List<Topics> topics {get;set;} 
        public Integer primaryContainerId {get;set;} 
        public List<Integer> containerIds {get;set;} 
        public String slug {get;set;} 
        public Boolean wiki {get;set;} 
        public Integer score {get;set;} 
        public Integer depth {get;set;} 
        public Integer viewCount {get;set;} 
        public Integer upVoteCount {get;set;} 
        public Integer downVoteCount {get;set;} 
        public List<Integer> answers {get;set;} 
        public Integer answerCount {get;set;} 

        public List_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'creationDate') {
                            creationDate = parser.getLongValue();
                        } else if (text == 'creationDateFormatted') {
                            creationDateFormatted = parser.getText();
                        } else if (text == 'title') {
                            title = parser.getText();
                        } else if (text == 'body') {
                            body = parser.getText();
                        } else if (text == 'bodyAsHTML') {
                            bodyAsHTML = parser.getText();
                        } else if (text == 'author') {
                            author = new Author(parser);
                        } else if (text == 'lastEditedAction') {
                            lastEditedAction = parser.getIntegerValue();
                        } else if (text == 'activeRevisionId') {
                            activeRevisionId = parser.getIntegerValue();
                        } else if (text == 'revisionIds') {
                            revisionIds = new List<Integer>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                revisionIds.add(Integer.ValueOf(parser.getIntegerValue()));
                            }
                        } else if (text == 'lastActiveUserId') {
                            lastActiveUserId = parser.getIntegerValue();
                        } else if (text == 'lastActiveDate') {
                            lastActiveDate = parser.getLongValue();
                        } else if (text == 'attachments') {
                            attachments = new List<Attachments>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                attachments.add(new Attachments(parser));
                            }
                        } else if (text == 'childrenIds') {
                            childrenIds = new List<Integer>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                childrenIds.add(Integer.ValueOf(parser.getIntegerValue()));
                            }
                        } else if (text == 'commentIds') {
                            commentIds = new List<Attachments>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                commentIds.add(new Attachments(parser));
                            }
                        } else if (text == 'marked') {
                            marked = parser.getBooleanValue();
                        } else if (text == 'topics') {
                            topics = new List<Topics>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                topics.add(new Topics(parser));
                            }
                        } else if (text == 'primaryContainerId') {
                            primaryContainerId = parser.getIntegerValue();
                        } else if (text == 'containerIds') {
                            containerIds = new List<Integer>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                containerIds.add(Integer.ValueOf(parser.getIntegerValue()));
                            }
                        } else if (text == 'slug') {
                            slug = parser.getText();
                        } else if (text == 'wiki') {
                            wiki = parser.getBooleanValue();
                        } else if (text == 'score') {
                            score = parser.getIntegerValue();
                        } else if (text == 'depth') {
                            depth = parser.getIntegerValue();
                        } else if (text == 'viewCount') {
                            viewCount = parser.getIntegerValue();
                        } else if (text == 'upVoteCount') {
                            upVoteCount = parser.getIntegerValue();
                        } else if (text == 'downVoteCount') {
                            downVoteCount = parser.getIntegerValue();
                        } else if (text == 'answers') {
                            answers = new List<Integer>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                answers.add(Integer.ValueOf(parser.getIntegerValue()));
                            }
                        } else if (text == 'answerCount') {
                            answerCount = parser.getIntegerValue();
                        } else {
                           // System.debug(LoggingLevel.WARN, 'List_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public String name {get;set;} 
    public String sort_Z {get;set;} // in json: sort
    public Integer page {get;set;} 
    public Integer pageSize {get;set;} 
    public Integer pageCount {get;set;} 
    public Integer listCount {get;set;} 
    public Integer totalCount {get;set;} 
    public List<String> sorts {get;set;} 
    public List<List_Z> list_Z {get;set;} // in json: list

    public JSON2ApexAllQuestion(JSONParser parser) {
        while (parser.nextToken() != JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != JSONToken.VALUE_NULL) {
                    if (text == 'name') {
                        name = parser.getText();
                    } else if (text == 'sort') {
                        sort_Z = parser.getText();
                    } else if (text == 'page') {
                        page = parser.getIntegerValue();
                    } else if (text == 'pageSize') {
                        pageSize = parser.getIntegerValue();
                    } else if (text == 'pageCount') {
                        pageCount = parser.getIntegerValue();
                    } else if (text == 'listCount') {
                        listCount = parser.getIntegerValue();
                    } else if (text == 'totalCount') {
                        totalCount = parser.getIntegerValue();
                    } else if (text == 'sorts') {
                        sorts = new List<String>();
                        while (parser.nextToken() != JSONToken.END_ARRAY) {
                            sorts.add(String.valueOf(parser));
                        }
                    } else if (text == 'list') {
                        list_Z = new List<List_Z>();
                        while (parser.nextToken() != JSONToken.END_ARRAY) {
                            list_Z.add(new List_Z(parser));
                        }
                    } else {
                       // System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class Author {
        public Integer id {get;set;} 
        public String username {get;set;} 
        public String realname {get;set;} 
        public Integer reputation {get;set;} 

        public Author(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'username') {
                            username = parser.getText();
                        } else if (text == 'realname') {
                            realname = parser.getText();
                        } else if (text == 'reputation') {
                            reputation = parser.getIntegerValue();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Author consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Attachments {

        public Attachments(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        {
                            //System.debug(LoggingLevel.WARN, 'Attachments consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static JSON2ApexAllQuestion parse(String json) {
        return new JSON2ApexAllQuestion(System.JSON.createParser(json));
    }
}